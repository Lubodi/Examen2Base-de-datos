@page
@model IndexModel

@using MiProyectoWeb.Service;

@{
    ViewData["Title"] = "Home page";
    var apiService = new ApiService();
    List<List<object>> response = null;

    // Asignamos el endpoint seleccionado desde la query string o usamos uno por defecto.
    var selectedEndpoint = Request.Query["endpoint"].ToString() ?? "/regions"; 

    try
    {
        response = await apiService.GetApiResponseAsync(selectedEndpoint);
    }
    catch (Exception ex)
    {
        <p class="text-danger">Error: @ex.Message</p>
    }
}

<div class="container text-center">
    <h1 class="display-4">Bienvenido</h1>
    <p>Conoce sobre <a href="https://learn.microsoft.com/aspnet/core" target="_blank">construir aplicaciones web con ASP.NET Core</a>.</p>

    <!-- ComboBox/Select -->
    <div class="form-group">
        <label for="endpointSelect">Seleccione un endpoint:</label>
        <select id="endpointSelect" class="form-control">
            <option value="/regions">Regiones</option>
            <option value="/jobs">Trabajos</option>
            <option value="/employes">Empleados</option>
            <option value="/departments">Departamentos</option>
            <option value="/jobs_history">Historial de Trabajos</option>
            <option value="/countries">Paises</option>
            <option value="/locations">Locationes</option>
        </select>
    </div>

    <button id="fetchDataButton" class="btn btn-primary mb-3">Consultar</button>

    <input type="text" id="searchInput" placeholder="Buscar..." class="form-control mb-3" />

    @if (response != null && response.Count > 0)
    {
        <table class="table table-striped" id="dataTable">
            <thead class="thead-dark">
                <tr>
                    @for (int i = 0; i < response[0].Count; i++)
                    {
                        <th>Columna @i</th> <!-- O bien cambiar por encabezados más específicos -->
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var row in response)
                {
                    <tr>
                        @foreach (var item in row)
                        {
                            <td>@item</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No se encontraron datos.</p>
    }
</div>

<style>
    body {
        padding-top: 50px;
        background-color: #f8f9fa; /* Color de fondo claro */
    }

    .container {
        max-width: 800px; /* Establecer un ancho máximo para el contenido */
        margin: auto;     /* Centrar el contenedor */
        background-color: #ffffff; /* Fondo blanco para el contenedor */
        padding: 20px;    /* Espacio interno del contenedor */
        border-radius: 8px; /* Borde redondeado */
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); /* Sombra suave */
    }

    .form-control {
        border: 1px solid #ced4da;
    }

    .btn-primary {
        background-color: #007bff; /* Color azul del botón */
        border-color: #007bff;   /* Color del borde del botón */
    }

    .btn-primary:hover {
        background-color: #0056b3; /* Color más oscuro al pasar el mouse */
        border-color: #004085; /* Color del borde más oscuro */
    }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: #f2f2f2; /* Color de fondo para filas impares */
    }

    .thead-dark {
        background-color: #343a40; /* Color oscuro para el encabezado de la tabla */
        color: #ffffff; /* Color del texto blanco */
    }

    .text-danger {
        color: #dc3545; /* Color rojo para mensajes de error */
    }
</style>

<script>
    // Configurar el ComboBox para que seleccione la opción actual
    document.addEventListener("DOMContentLoaded", function() {
        const endpointSelect = document.getElementById("endpointSelect");
        const currentEndpoint = "@selectedEndpoint"; // Pasamos la variable desde Razor a JS
        endpointSelect.value = currentEndpoint; // Establecer el valor seleccionado basado en el endpoint actual
    });

    // Manejar el evento al presionar el botón de búsqueda
    document.getElementById("fetchDataButton").addEventListener("click", function() {
        const selectedEndpoint = document.getElementById("endpointSelect").value;
        
        // Recargar la página con el nuevo endpoint desde el ComboBox
        window.location.href = `?endpoint=${encodeURIComponent(selectedEndpoint)}`;
    });

    // Función de búsqueda
    document.getElementById("searchInput").addEventListener("keyup", function() {
        const input = document.getElementById("searchInput");
        const filter = input.value.toUpperCase();
        const table = document.getElementById("dataTable");
        const tr = table.getElementsByTagName("tr");

        for (let i = 1; i < tr.length; i++) {
            tr[i].style.display = "none"; // Ocultar la fila por defecto
            const td = tr[i].getElementsByTagName("td");
            for (let j = 0; j < td.length; j++) {
                if (td[j]) {
                    const txtValue = td[j].textContent || td[j].innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        tr[i].style.display = ""; // Mostrar la fila si coincide
                        break; // Salir del bucle si se encontró una coincidencia
                    }
                }
            }
        }
    });
</script>
